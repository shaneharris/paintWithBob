(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });

var Setup = function () {
    function Setup() {
        var _this2 = this;

        _classCallCheck(this, Setup);

        this.head_controls = false;
        this.selected_color = 'rgba(255,0,0,1)';
        this.selected_brush_size = 2;
        this.canvas_properties = {
            position: {
                x: 0,
                y: 0,
                z: 0
            },
            width: 0.6,
            height: 0.8,
            canvas_width: 386,
            canvas_height: 512
        };
        this.offset = {
            x: 6,
            y: 1.4,
            z: 10.5
        };
        this.radius = 6;
        this.max_positions = 12;
        this.offset_angle = Math.PI * .45;
        this.setupAframeCanvas();
        document.onreadystatechange = function () {
            if (document.readyState == "complete") {
                _this2.setupSocket();
                _this2.setupAltspace();
                _this2.setupPlayerPlaceholders();
            }
        };
    }

    _createClass(Setup, [{
        key: "setupSocket",
        value: function setupSocket() {
            var _this3 = this;

            this.socket = io('http://xactaccounts.co.uk:8080/');
            this.socket.on('seat-taken', function (socket_id) {
                _this3.socket_id = socket_id;
                var canvas = document.querySelector('#canvasPlane');
                console.log(_this3.canvas_properties.position);
                canvas.setAttribute("position", _this3.canvas_properties.position);
            });
            this.socket.on('seat-left', function () {
                _this3.selected_position = null;
            });
            this.socket.on('players', function (players) {
                _this3.players = players;
            });
            this.socket.on('seat-unavailable', function () {
                // TODO: display popup
            });
        }
    }, {
        key: "setupAframeCanvas",
        value: function setupAframeCanvas() {
            var _this = this;
            var color_block = void 0,
                color_strip = void 0,
                color_block_ctx = void 0,
                color_strip_ctx = void 0,
                color_block_width = void 0,
                color_block_height = void 0,
                rgbaColor = void 0,
                color_strip_width = void 0,
                color_label = void 0,
                bruch_block_canvas = void 0;
            AFRAME.registerComponent('color-picker', {
                init: function init() {
                    var color_block_canvas = document.getElementById('color-block');
                    var color_strip_canvas = document.getElementById('color-strip');
                    color_block_ctx = color_block_canvas.getContext('2d');
                    color_block_width = color_block_canvas.width;
                    color_block_height = color_block_canvas.height;
                    color_strip_ctx = color_strip_canvas.getContext('2d');
                    color_strip_width = color_strip_canvas.width;
                    var color_strip_height = color_strip_canvas.height;
                    rgbaColor = 'rgba(255,0,0,1)';
                    color_block_ctx.rect(0, 0, color_block_width, color_block_height);
                    _this.fillColorGradient(color_block_ctx, color_strip_ctx, color_block_width, color_block_height, rgbaColor);
                    color_strip_ctx.rect(0, 0, color_strip_width, color_strip_height);
                    var color_strip_gradient = color_strip_ctx.createLinearGradient(0, 0, 0, color_block_height);
                    color_strip_gradient.addColorStop(0, 'rgba(255, 0, 0, 1)');
                    color_strip_gradient.addColorStop(0.17, 'rgba(255, 255, 0, 1)');
                    color_strip_gradient.addColorStop(0.34, 'rgba(0, 255, 0, 1)');
                    color_strip_gradient.addColorStop(0.51, 'rgba(0, 255, 255, 1)');
                    color_strip_gradient.addColorStop(0.68, 'rgba(0, 0, 255, 1)');
                    color_strip_gradient.addColorStop(0.85, 'rgba(255, 0, 255, 1)');
                    color_strip_gradient.addColorStop(1, 'rgba(255, 0, 0, 1)');
                    color_strip_ctx.fillStyle = color_strip_gradient;
                    color_strip_ctx.fill();
                    color_block = document.getElementById('colorBlock');
                    color_strip = document.getElementById('colorStrip');
                    color_label = document.getElementById('colorLabel');
                    color_label.addEventListener("mousedown", function (e) {
                        console.log(e);
                        _this.color_picker_open = !_this.color_picker_open;
                    });
                },
                tick: function tick() {
                    color_label.setAttribute('position', { x: _this.canvas_properties.position.x, y: _this.canvas_properties.position.y + 0.455, z: _this.canvas_properties.position.z + 0.2 });
                    if (_this.color_picker_open) {
                        color_block.setAttribute('position', { x: _this.canvas_properties.position.x, y: _this.canvas_properties.position.y + 0.150, z: _this.canvas_properties.position.z + 0.555 });
                        color_strip.setAttribute('position', { x: _this.canvas_properties.position.x, y: _this.canvas_properties.position.y + 0.150, z: _this.canvas_properties.position.z + 0.86 });
                        color_block.setAttribute('scale', { x: 0.5, y: 0.5, z: 1 });
                        color_strip.setAttribute('scale', { x: 0.1, y: 0.5, z: 1 });
                        _this.getPaintPoint(color_strip.object3D.position, 0.1, 0.5).then(function (point) {
                            var imageData = color_strip_ctx.getImageData(Math.round(point.x * color_strip_width), Math.round(point.y * color_block_height), 1, 1).data;
                            rgbaColor = 'rgba(' + imageData[0] + ',' + imageData[1] + ',' + imageData[2] + ',1)';
                            _this.fillColorGradient(color_block_ctx, color_strip_ctx, color_block_width, color_block_height, rgbaColor);
                        });
                        _this.getPaintPoint(color_block.object3D.position, 0.5, 0.5).then(function (point) {
                            var imageData = color_block_ctx.getImageData(Math.round(point.x * color_block_width), Math.round(point.y * color_block_height), 1, 1).data;
                            _this.selected_color = 'rgb(' + imageData[0] + ',' + imageData[1] + ',' + imageData[2] + ')';
                            color_label.setAttribute("material", { shader: 'flat', color: _this.selected_color });
                            document.querySelector('#handBall').setAttribute("material", { shader: 'flat', color: _this.selected_color });
                        });
                    } else {
                        color_block.setAttribute('scale', { x: 0, y: 0, z: 0 });
                        color_strip.setAttribute('scale', { x: 0, y: 0, z: 0 });
                    }
                }
            });
            AFRAME.registerComponent('brush-size-picker', {
                init: function init() {},
                tick: function tick() {
                    this.el.setAttribute('position', { x: _this.canvas_properties.position.x, y: _this.canvas_properties.position.y + 0.455, z: _this.canvas_properties.position.z - 0.1025 });
                    _this.getPaintPoint(this.el.object3D.position, 0.34, 0.1).then(function (point) {
                        var handle = document.querySelector('#brushBlockHandle');
                        handle.setAttribute('position', {
                            x: point.x * 0.34 - 0.17,
                            y: 0,
                            z: 0.002
                        });
                        var scale = {
                            x: point.x * 0.02 + 0.005,
                            y: point.x * 0.02 + 0.005,
                            z: point.x * 0.02 + 0.005
                        };
                        handle.setAttribute('scale', scale);
                        document.querySelector('#handBall').setAttribute('scale', scale);
                        _this.selected_brush_size = point.x * 10;
                    });
                }
            });
            AFRAME.registerComponent('draw-canvas', {
                schema: { default: '' },
                init: function init() {
                    this.el.setAttribute('position', _this.canvas_properties.position);
                    this.el.setAttribute('scale', _this.canvas_properties.width + ' ' + _this.canvas_properties.height + ' 1');
                    _this.canvas = document.getElementById(this.data);
                    _this.ctx = _this.canvas.getContext('2d');
                    _this.canvas.width = _this.canvas_properties.canvas_width;
                    _this.canvas.height = _this.canvas_properties.canvas_height;
                    _this.ctx.fillStyle = "#ffffff";
                    _this.ctx.fillRect(0, 0, _this.canvas.width, _this.canvas.height);
                },
                tick: function tick() {
                    if (_this.padR) {
                        var hand = document.querySelector('#handBox');
                        hand.setAttribute('position', {
                            x: _this.padR.position.x,
                            y: _this.padR.position.y,
                            z: _this.padR.position.z
                        });
                        hand.object3D.quaternion.set(_this.padR.rotation.x, _this.padR.rotation.y, _this.padR.rotation.z, _this.padR.rotation.w);
                        _this.getPaintPoint(this.el.object3D.position, _this.canvas_properties.width, _this.canvas_properties.height).then(function (point) {
                            _this.ctx.beginPath();
                            _this.ctx.fillStyle = _this.selected_color;
                            _this.ctx.arc(point.x * _this.canvas_properties.canvas_width, point.y * _this.canvas_properties.canvas_height, _this.selected_brush_size, 0, 2 * Math.PI);
                            _this.ctx.fill();
                        });
                    }
                }
            });
            AFRAME.registerComponent('gamepad-update', {
                schema: { default: '' },
                init: function init() {},
                tick: function tick() {
                    if (_this.altspace_ready) {
                        var gamepadsList = altspace.getGamepads();
                        for (var i = 0; i < gamepadsList.length; i++) {
                            var curPadInfo = gamepadsList[i];
                            switch (curPadInfo.mapping) {
                                case "standard":
                                    continue;
                                case "touch":
                                case "steamvr":
                                    this.mapping = curPadInfo.mapping;
                                    if (curPadInfo.hand == "left") {
                                        _this.padL = curPadInfo;
                                    } else {
                                        _this.padR = curPadInfo;
                                    }
                                    break;
                                default:
                                    console.log("UNKNOWN CONTROLLER TYPE??", curPadInfo.mapping);
                                    break;
                            }
                        }
                        _this.head_controls = !_this.padL && !_this.padR;
                        if (_this.head_controls) {}
                    }
                }
            });
        }
    }, {
        key: "getPaintPoint",
        value: function getPaintPoint(position, width, height) {
            return new Promise(function (r) {
                var paint_point = new THREE.Vector3();
                paint_point.setFromMatrixPosition(document.querySelector('#handBall').object3D.matrixWorld);
                var paint_point_x = paint_point.x;
                paint_point.x = position.x;
                var paint = document.querySelector('#paintBox');
                if (paint_point.x - 0.01 < paint_point_x && paint_point.z > position.z - width / 2 && paint_point.z < position.z + width / 2 && paint_point.y > position.y - height / 2 && paint_point.y < position.y + height / 2) {
                    paint.setAttribute('position', {
                        x: paint_point.x,
                        y: paint_point.y,
                        z: paint_point.z
                    });
                    var offset_z = (paint_point.z - (position.z - width / 2)) * (1 / width);
                    var offset_y = 1 - (paint_point.y - (position.y - height / 2)) * (1 / height);
                    r({ x: offset_z, y: offset_y });
                }
            });
        }
    }, {
        key: "setupPlayerPlaceholders",
        value: function setupPlayerPlaceholders() {
            var _this4 = this;

            var _loop = function _loop(i) {
                var angle = Math.PI / 12 * i + _this4.offset_angle;
                var position = {
                    x: Math.cos(angle) * _this4.radius + _this4.offset.x,
                    y: _this4.offset.y,
                    z: Math.sin(angle) * _this4.radius + _this4.offset.z
                };
                var placeholder = document.getElementById('player_' + i);
                placeholder.setAttribute('position', position.x + ' ' + position.y + ' ' + position.z);
                placeholder.setAttribute('rotation', '0 270 0');
                placeholder.setAttribute('scale', '0.6 0.8 1');
                placeholder.addEventListener("mousedown", function () {
                    placeholder.setAttribute('scale', '0 0 0');
                    _this4.joinPosition(i, position);
                });
            };

            for (var i = 0; i < this.max_positions; i++) {
                _loop(i);
            }
        }
    }, {
        key: "setupAltspace",
        value: function setupAltspace() {
            var _this5 = this;

            altspace.getThreeJSTrackingSkeleton().then(function (skeletonInfo) {
                _this5.skeleton_info = skeletonInfo;
            });
            altspace.getSpace().then(function (space_info) {
                _this5.space_info = space_info;
            });
            altspace.getUser().then(function (user_info) {
                _this5.user_info = user_info;
                _this5.altspace_ready = true;
            });
        }
    }, {
        key: "joinPosition",
        value: function joinPosition(position, point) {
            this.socket.emit('take-seat', {
                room_id: this.space_info.sid,
                position: position,
                name: this.user_info.displayName,
                moderator: this.user_info.isModerator,
                user_id: this.user_info.userId
            });
            this.canvas_properties.position = point;
        }
    }, {
        key: "leavePosition",
        value: function leavePosition() {
            this.socket.emit('leave-seat');
            var canvas = document.querySelector('#canvasPlane');
            canvas.setAttribute('scale', '0 0 0');
        }
    }, {
        key: "fillColorGradient",
        value: function fillColorGradient(ctx1, ctx2, width1, height1, rgbaColor) {
            ctx1.fillStyle = rgbaColor;
            ctx1.fillRect(0, 0, width1, height1);
            var grdWhite = ctx2.createLinearGradient(0, 0, width1, 0);
            grdWhite.addColorStop(0, 'rgba(255,255,255,1)');
            grdWhite.addColorStop(1, 'rgba(255,255,255,0)');
            ctx1.fillStyle = grdWhite;
            ctx1.fillRect(0, 0, width1, height1);
            var grdBlack = ctx2.createLinearGradient(0, 0, 0, height1);
            grdBlack.addColorStop(0, 'rgba(0,0,0,0)');
            grdBlack.addColorStop(1, 'rgba(0,0,0,1)');
            ctx1.fillStyle = grdBlack;
            ctx1.fillRect(0, 0, width1, height1);
        }
    }]);

    return Setup;
}();

exports.Setup = Setup;

},{}],2:[function(require,module,exports){
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
var setup_class_1 = require("./app/setup.class");

var Main = function Main() {
    _classCallCheck(this, Main);

    this.setup = new setup_class_1.Setup();
};

exports.Main = Main;
new Main();

},{"./app/setup.class":1}]},{},[2])

//# sourceMappingURL=data:application/json;charset=utf8;base64,
